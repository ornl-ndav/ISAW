/*
 * File: AbstractLayoutManager.java
 *
 * Copyright (C) 2005, Mike Miller
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *
 * Primary   Mike Miller <millermi@uwstout.edu>
 * Contact:  Student Developer, University of Wisconsin-Stout
 *           
 * Contact : Dennis Mikkelson <mikkelsond@uwstout.edu>
 *           Department of Mathematics, Statistics and Computer Science
 *           University of Wisconsin-Stout
 *           Menomonie, WI 54751, USA
 *
 * This work was supported by the National Science Foundation under grant
 * number DMR-0218882, and by the Intense Pulsed Neutron Source Division
 * of Argonne National Laboratory, Argonne, IL 60439-4845, USA.
 *
 * For further information, see <http://www.pns.anl.gov/ISAW/>
 *
 * Modified:
 *
 *  $Log: AbstractLayoutManager.java,v $
 *  Revision 1.1  2005/03/28 05:54:04  millermi
 *  - Initial Version - This is a building block in the new viewer
 *    structure.
 *
 */
 package gov.anl.ipns.ViewTools.Layouts;

 import gov.anl.ipns.ViewTools.Components.IVirtualArray;
 import gov.anl.ipns.ViewTools.Components.ObjectState;
 import gov.anl.ipns.ViewTools.Components.Menu.ViewMenuItem;
 import gov.anl.ipns.ViewTools.Components.ViewControls.ViewControl;
 import gov.anl.ipns.ViewTools.UI.ActionValueJPanel;

/**
 * This class defines methods needed for all LayoutManagers.
 * Extending classes will create a display from an
 * IVirtualArray in a variety of views. Individual views
 * are generated by classes implementing IComponentSwapper which make
 * use of IViewComponents. LayoutManagers are a collection of individual
 * views grouped together into a logical display. LayoutManagers will not be
 * responsible for laying out ViewMenuItems or shared controls, that will
 * be the job of the ComponentViewManager.
 */
 public abstract class AbstractLayoutManager extends ActionValueJPanel
                                             implements IComponentLayoutManager
 {
  /**
   * Get the current state of this LayoutManager.
   *
   *  @param  is_default Is desired state for preferences (default=true) or 
   *		         a project (session=false) save? Use IPreserveState
   *		         variables for parameter.
   *  @return The current ObjectState of this LayoutManager.
   */
   abstract public ObjectState getObjectState( boolean is_default );
   
  /**
   * Set the state of the LayoutManager to new_state.
   *
   *  @param  new_state The new state of the LayoutManager.
   */ 
   abstract public void setObjectState( ObjectState new_state );
   
  /**
   * Set the data to be displayed by this LayoutManager.
   *
   *  @param  data The data to be displayed.
   */
   abstract public void setData( IVirtualArray data );
   
  /**
   * Get a unique list of controls that will be shared with controls from
   * other IComponentLayoutManagers.
   *
   *  @return Unique list of controls to be shared/linked with controls from
   *          other IComponentLayoutManagers.
   */
   abstract public ViewControl[] getSharedControls();
   
  /**
   * Get the ViewMenuItems that are to be displayed by this LayoutManager.
   *
   *  @return Unique list of menu items to be displayed by the ViewManager.
   */
   abstract public ViewMenuItem[] getLayoutMenuItems();
   
  /**
   * Since layouts can contain multiple AbstractComponentSwappers,
   * this method will allow you to access any given swapper.
   *
   *  @param  index Index of swapper desired.
   *  @return The AbstractComponentSwapper displayed by this layout manager.
   */
   abstract public AbstractComponentSwapper getSwapper(int index);
   
  /**
   * Since layouts can contain multiple AbstractComponentSwappers,
   * this method will tell how many swappers are used by this LayoutManager.
   *
   *  @return  The number of AbstractComponentSwappers used by this manager.
   */
   abstract public int getSwapperCount();
 }
