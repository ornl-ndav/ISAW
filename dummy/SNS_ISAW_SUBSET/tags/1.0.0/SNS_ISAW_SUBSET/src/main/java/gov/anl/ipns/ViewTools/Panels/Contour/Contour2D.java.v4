/*
 * File:  Contour2D.java
 *
 * Copyright (C) 2004, Dennis Mikkelson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *
 * Contact : Dennis Mikkelson <mikkelsond@uwstout.edu>
 *           Department of Mathematics, Statistics and Computer Science
 *           University of Wisconsin-Stout
 *           Menomonie, WI 54751, USA
 *
 * This work was supported by the National Science Foundation under grant
 * number DMR-0218882, and by the Intense Pulsed Neutron Source Division
 * of Argonne National Laboratory, Argonne, IL 60439-4845, USA.
 *
 * For further information, see <http://www.pns.anl.gov/ISAW/>
 *
 * Modified:
 *
 *  $Log:$
 */

package gov.anl.ipns.ViewTools.Panels.Contour;

import gov.anl.ipns.Util.Numeric.*;
import java.util.*;

public class Contour2D
{
  public static int counter[] = { 0, 0, 0, 0, 0 };
  public static int n_discarded = 0;

  /**
   *  A line for which the fractional row and column coordinates of the 
   *  end points differ by less than MIN_DIFF will be assumed to be of 
   *  length 0 and will not be included in the list of line segments
   *  returned by the contour() method. 
   */
  public static final float MIN_DIFF = 1.0E-3f;   

  /**
   *  Don't instantiate this class.
   */
  private Contour2D()
  {
  }

  /**
   *  Make a Vector containing endpoints of line segments describing contours
   *  at the specified level through the data.  The points are fractional
   *  row, col values.
   *
   *  @param  vals    Rectangular array of values for which contour lines are
   *                  to be generated.
   *  @param  level   The level at which contour lines are to be generated.
   *
   *  @return  A vector containing endpoints of line segments at the requested
   *           contour level.  The vector contains objects of type 
   *           floatPoint2D.  Successive pairs of points form individual
   *           (possibly disjoint) line segments.  The x coordinate of the
   *           point contains the col number and the y coordinate contains
   *           the row number.
   */
  public static Vector contour( float vals[][], float level )
  {
    int n_points = 0;
    floatPoint2D end_pt1, 
                 end_pt2;
    floatPoint2D end_points[] = new floatPoint2D[ 4 ];  // at most 1 point per
                                                        // side
    Vector lines = new Vector();
    int    row_inc[] = { 0, 0, 1, 1, 0 };
    int    col_inc[] = { 0, 1, 1, 0, 0 };

    int    r0,                                       // row, col values at
           r1,                                       // ends of edge
           c0,
           c1; 
    float  v0, 
           v1;
    float  r, 
           c, 
           del_row,
           del_col,
           fract;

    if ( vals == null )                             // check for valid 2D array
    {
      System.out.println("vals array is null in Contour2D.contour()");
      return lines;
    }

    if ( vals.length <= 0 )
    {
      System.out.println("vals.length <= 0 in Contour2D.contour()");
      return lines;
    }

    for ( int i = 0; i < vals.length; i++ )
      if ( vals[i] == null )
      {
        System.out.println("vals[i] == null in Contour2D.contour()" + i );
        return lines;
      }

    for ( int i = 0; i < vals.length; i++ )
      if ( vals[i].length != vals[0].length )
      {
        System.out.println("vals[i].length wrong in Contour2D.contour()" + i );
        return lines;
      }
                                                     // for each square
    for ( int row = 0; row < vals.length-1; row++ )
      for ( int col = 0; col < vals[0].length-1; col++ )
      {
         n_points = 0;
         for ( int edge = 0; edge < 4; edge++ )      // for each edge, find
         {                                           // point(s) at level
           r0 = row + row_inc[edge];
           r1 = row + row_inc[edge+1];
           c0 = col + col_inc[edge];
           c1 = col + col_inc[edge+1];
           v0 = vals[r0][c0];
           v1 = vals[r1][c1];
           if ( (v0 - level) * (v1 - level) <= 0 )   // we have an intersection
           {                                         // so interpolate
             if ( v0 != v1 )                         // only keep edges where
             {                                       // the value changes
               fract = ( level - v0 ) / ( v1 - v0 );
               del_row = r1 - r0;
               del_col = c1 - c0;
               r = r0 + fract * del_row; 
               c = c0 + fract * del_col;
               end_points[n_points] = new floatPoint2D( c, r );
               n_points++;
             }
           }
         }

         counter[n_points]++;
         if ( n_points == 3 && counter[n_points] % 100 == 1 )
         {
           System.out.println( "=========================" ); 
           for ( int vert = 0; vert < 4; vert++ )
           {
             r0 = row + row_inc[vert];
             c0 = col + col_inc[vert];
             System.out.println(" r, c = " +r0+ ", " +c0+ ", "+vals[r0][c0]);
           }
           for ( int i = 0; i < n_points; i++ )
             System.out.print( end_points[i] );
           System.out.println();
         }
                                                     // form edges using all
         for ( int pt1 = 0; pt1 < n_points; pt1++ )  // pairs of points
           for ( int pt2 = pt1+1; pt2 < n_points; pt2++ )
           {
              end_pt1 = end_points[pt1];             // omit length 0 lines
              end_pt2 = end_points[pt2];
              if ( Math.abs(end_pt1.x - end_pt2.x ) >= MIN_DIFF || 
                   Math.abs(end_pt1.y - end_pt2.y ) >= MIN_DIFF  )
              {
                lines.add( end_pt1 );
                lines.add( end_pt2 );
              }
              else
                n_discarded++;
           }
      }

    return lines;
  }

  /**
   *  Main program for basic testing purposes.  Generates a small array
   *  and a set of contour line segments.
   */
  public static void main( String args[] )
  {
    int N_ROWS = 10;
    int N_COLS = 10;
    float MAX = 100;

    float vals[][] = new float[N_ROWS][N_COLS];
    for ( int row = 0; row < N_ROWS; row++ )
      for ( int col = 0; col < N_ROWS; col++ )
        vals[row][col] = MAX * (float)(row+col) / (N_ROWS+N_COLS - 1.0f);

    Vector lines = contour( vals, MAX/2.0f );

    for ( int i = 0; i < lines.size()/2; i++ )      
    {
      System.out.print(   " " + (floatPoint2D)lines.elementAt( 2*i ) ); 
      System.out.println( " " + (floatPoint2D)lines.elementAt( 2*i + 1 ) ); 
    } 
     
  }

}
