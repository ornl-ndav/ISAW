/*
 * File:  Contour2D.java
 *
 * Copyright (C) 2004, Dennis Mikkelson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *
 * Contact : Dennis Mikkelson <mikkelsond@uwstout.edu>
 *           Department of Mathematics, Statistics and Computer Science
 *           University of Wisconsin-Stout
 *           Menomonie, WI 54751, USA
 *
 * This work was supported by the National Science Foundation under grant
 * number DMR-0218882, and by the Intense Pulsed Neutron Source Division
 * of Argonne National Laboratory, Argonne, IL 60439-4845, USA.
 *
 * For further information, see <http://www.pns.anl.gov/ISAW/>
 *
 * Modified:
 *
 *  $Log: Contour2D.java,v $
 *  Revision 1.1  2004/07/07 23:06:15  dennis
 *  Class with static methods for generating contour lines given a 2D array
 *  of floats.  Currently only a basic method to generate iso-value line
 *  segments at a specified level is implemented.
 *
 */

package gov.anl.ipns.ViewTools.Panels.Contour;

import gov.anl.ipns.Util.Numeric.*;
import java.util.*;

public class Contour2D
{
  public static int counter[] = { 0, 0, 0, 0, 0 };

  /**
   *  Don't instantiate this class.
   */
  private Contour2D()
  {
  }

  /**
   *  Make a Vector containing endpoints of line segments describing contours
   *  at the specified level through the data.  The endpoints are given as
   *  fractional row, col values.  Contour segments around points that are 
   *  strictly greater than the specified level are generated.  Isolated 
   *  points or "ridge lines" exactly equal to the specified level will NOT
   *  generate contour lines.  NOTE:  The returned vector contains isolated
   *  "ragged" segments which together form contour lines for the array of
   *  values.  The individual segments do not occur in any particular order,
   *  since they are generated by considering where the specified contour
   *  level passes through each individual square with four array entries
   *  at it's corners.
   *
   *  @param  vals    Rectangular array of values for which contour lines are
   *                  to be generated.
   *  @param  level   The level at which contour lines are to be generated.
   *
   *  @return  A vector containing endpoints of line segments at the requested
   *           contour level.  The vector contains objects of type 
   *           floatPoint2D.  Successive pairs of points form individual
   *           (possibly disjoint) line segments.  The x coordinate of the
   *           point contains the col number and the y coordinate contains
   *           the row number.
   */
  public static Vector contour( float vals[][], float level )
  {
    int n_points = 0;
    floatPoint2D end_points[] = new floatPoint2D[ 4 ];  // at most 1 point per
                                                        // side
    Vector lines = new Vector();
    int    row_inc[] = { 0, 0, 1, 1, 0 };
    int    col_inc[] = { 0, 1, 1, 0, 0 };

    int    r0,                                       // row, col values at
           r1,                                       // ends of edge
           c0,
           c1; 
    float  v0, 
           v1;
    float  r, 
           c, 
           del_row,
           del_col,
           fract;
    float  total_1,
           total_2;

    if ( vals == null )                             // check for valid 2D array
    {
      System.out.println("vals array is null in Contour2D.contour()");
      return lines;
    }

    if ( vals.length <= 0 )
    {
      System.out.println("vals.length <= 0 in Contour2D.contour()");
      return lines;
    }

    for ( int i = 0; i < vals.length; i++ )
      if ( vals[i] == null )
      {
        System.out.println("vals[i] == null in Contour2D.contour()" + i );
        return lines;
      }

    for ( int i = 0; i < vals.length; i++ )
      if ( vals[i].length != vals[0].length )
      {
        System.out.println("vals[i].length wrong in Contour2D.contour()" + i );
        return lines;
      }
                                                     // for each square
    for ( int row = 0; row < vals.length-1; row++ )
      for ( int col = 0; col < vals[0].length-1; col++ )
      {
         n_points = 0;
         for ( int edge = 0; edge < 4; edge++ )      // for each edge, find
         {                                           // point(s) at level
           r0 = row + row_inc[edge];
           r1 = row + row_inc[edge+1];
           c0 = col + col_inc[edge];
           c1 = col + col_inc[edge+1];
           v0 = vals[r0][c0];
           v1 = vals[r1][c1];
           if ( (v0 - level) * (v1 - level) <= 0 )  // We have an intersection
           {                                        // so interpolate.
             if ( v0 != v1  &&                      // 0nly deal with edges
                 (v0 >= level && v1 < level ||      // where there would be
                  v0 <  level && v1 >= level ) )    // an intersection even
             {                                      // if vertices shifted up.
               fract = ( level - v0 ) / ( v1 - v0 );
               del_row = r1 - r0;
               del_col = c1 - c0;
               r = r0 + fract * del_row; 
               c = c0 + fract * del_col;
               end_points[n_points] = new floatPoint2D( c, r );
               n_points++;
             }
           }
         }

         counter[n_points]++;

         if ( n_points == 2 )
           AddSegment( end_points[0], end_points[1], lines, vals, level ); 

         else if ( n_points == 4 )                   // choose two lines with
         {                                           // min total length
           total_1 = end_points[0].distance(end_points[1]) +
                     end_points[2].distance(end_points[3]);
           total_2 = end_points[1].distance(end_points[2]) +
                     end_points[3].distance(end_points[0]);
           if ( total_1 < total_2 )   
           {  
             AddSegment( end_points[0], end_points[1], lines, vals, level ); 
             AddSegment( end_points[2], end_points[3], lines, vals, level ); 
           }
           else                                      
           {
             AddSegment( end_points[1], end_points[2], lines, vals, level ); 
             AddSegment( end_points[3], end_points[0], lines, vals, level ); 
           }
         }
      }

    return lines;
  }


  /**
   *  Add a new line segment to the vector of segments, IF the line segment
   *  has positive length and does not represent a "ridge line".  A segment
   *  is considered a ridge line if it has the specified threshold level, but
   *  the points to the "left and right" of the segment are strictly less than
   *  the value on the segment. Eg: the pattern {{1,1,1,1},{1,2,2,1},{1,1,1,1}} 
   *  has a horizontal ridge line at the threshold value 2.  We discard such
   *  lines.
   */
  private static void AddSegment( floatPoint2D  pt1, 
                                  floatPoint2D  pt2, 
                                  Vector        lines,
                                  float         vals[][],
                                  float         level    )
  {
    boolean keep = true;
    int n_rows = vals.length;
    int n_cols = vals[0].length;

    int r1 = (int)pt1.y;
    int r2 = (int)pt2.y;
    int c1 = (int)pt1.x;
    int c2 = (int)pt2.x;

    if ( pt1.x == pt2.x && pt1.y == pt2.y )       // discard lines of length 0
      keep = false;

    if ( keep )                                   // discard if horizontal ridge
    {
      if ( r1 == pt1.y && r2 == pt2.y && r1 == r2 )   // horizontal line 
      {                                               // through grid point
        if ( r1 > 0 && r1 < n_rows - 1 )              // so check for ridge
        {
          if ( vals[r1-1][c1] < level && vals[r1+1][c1] < level &&  
               vals[r1-1][c2] < level && vals[r1+1][c2] < level )  
            keep = false;
        } 
      }
    }

    if ( keep )                                   // discard if vertical ridge
    {
      if ( c1 == pt1.x && c2 == pt2.x && c1 == c2 )   // vertical line 
      {                                               // through grid point
        if ( c1 > 0 && c1 < n_cols - 1 )              // so check for ridge
        {
          if ( vals[r1][c1-1] < level && vals[r1][c1+1] < level && 
               vals[r2][c1-1] < level && vals[r2][c1+1] < level )       
            keep = false;
        } 
      }
    }

    if ( keep )
    {
      lines.add( pt1 );
      lines.add( pt2 );
    }
  }

  /**
   *  Main program for basic testing purposes.  Generates a small array
   *  and a set of contour line segments.
   */
  public static void main( String args[] )
  {
    int N_ROWS = 10;
    int N_COLS = 10;
    float MAX = 100;

    float vals[][] = new float[N_ROWS][N_COLS];
    for ( int row = 0; row < N_ROWS; row++ )
      for ( int col = 0; col < N_ROWS; col++ )
        vals[row][col] = MAX * (float)(row+col) / (N_ROWS+N_COLS - 1.0f);

    Vector lines = contour( vals, MAX/2.0f );

    for ( int i = 0; i < lines.size()/2; i++ )      
    {
      System.out.print(   " " + (floatPoint2D)lines.elementAt( 2*i ) ); 
      System.out.println( " " + (floatPoint2D)lines.elementAt( 2*i + 1 ) ); 
    } 
  }

}
