/*
 * File: ButtonControl.java
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *           
 * Contact : Dennis Mikkelson <mikkelsond@uwstout.edu>
 *           Department of Mathematics, Statistics and Computer Science
 *           University of Wisconsin-Stout
 *           Menomonie, WI 54751, USA
 *
 * This work was supported by the National Science Foundation under grant
 * number DMR-0218882, and by the Intense Pulsed Neutron Source Division
 * of Argonne National Laboratory, Argonne, IL 60439-4845, USA.
 *
 * For further information, see <http://www.pns.anl.gov/ISAW/>
 *
 * Modified:
 *
 *  $Log$
 *  Revision 1.10  2006/01/05 20:29:34  rmikk
 *  set the Title for a button in the constructor
 *
 *  Revision 1.9  2005/05/25 20:28:37  dennis
 *  Now calls convenience method WindowShower.show() to show
 *  the window, instead of instantiating a WindowShower object
 *  and adding it to the event queue.
 *
 *  Revision 1.8  2005/03/28 05:57:25  millermi
 *  - Added copy() which will make an exact copy of the ViewControl.
 *
 *  Revision 1.7  2005/03/20 05:36:58  millermi
 *  - Modified main() to reflect parameter changes to
 *    ControlManager.makeManagerTestWindow().
 *
 *  Revision 1.6  2005/03/14 19:20:16  serumb
 *  Changed public variable button to private and added a method to get
 *  the button.
 *
 *  Revision 1.5  2005/03/09 22:36:03  millermi
 *  - Added methods get/setControlValue() and messaging of VALUE_CHANGED
 *    to enable controls to be linked.
 *  - Added "cm" as parameter to main() to test control with the
 *    ControlManager.
 *
 *  Revision 1.4  2004/03/15 23:53:54  dennis
 *  Removed unused imports, after factoring out the View components,
 *  Math and other utils.
 *
 *  Revision 1.3  2004/03/12 02:24:52  millermi
 *  - Changed package, fixed imports.
 *
 */
  
package gov.anl.ipns.ViewTools.Components.ViewControls;
 
 import javax.swing.*;
 import java.awt.event.*;
 import java.awt.GridLayout;
 
 import gov.anl.ipns.Util.Sys.WindowShower;
 import gov.anl.ipns.ViewTools.Components.ObjectState;

/**
 * This class is a ViewControl (ActiveJPanel) with a generic button for use 
 * by ViewComponents. It includes a hook to send out messages when the  
 * button has been pressed.
 */ 
public class ButtonControl extends ViewControl
{
  /**
   * "Button Text" - This String key refers to the text displayed on the
   * button. This ObjectState key references a String.
   */
   public static final String BUTTON_TEXT = "Button Text";
   private JButton button;
   private transient boolean ignore_change = false;
   private transient boolean button_pressed = false;

  /**
   *  constructor 
   */ 
   public ButtonControl(String buttonName)
   {  
      super("");
      button = new JButton(buttonName);
      this.add(button);
      button.addActionListener( new ButtonListener() ); 
      
      //setting the ViewControl title
      setTitle(buttonName);
     
   }
 
 /**
  * This method will get the current values of the state variables for this
  * object. These variables will be wrapped in an ObjectState.
  *
  *  @param  isDefault Should selective state be returned, that used to store
  *                    user preferences common from project to project?
  *  @return if true, the default state containing user preferences,
  *          if false, the entire state, suitable for project specific saves.
  */ 
  public ObjectState getObjectState( boolean isDefault )
  {
    ObjectState state = super.getObjectState(isDefault);
    state.insert( BUTTON_TEXT, new String(button.getText()) );
    return state;
  }
     
 /**
  * This method will set the current state variables of the object to state
  * variables wrapped in the ObjectState passed in.
  *
  *  @param  new_state
  */
  public void setObjectState( ObjectState new_state )
  {
    // Do nothing if state is null.
    if( new_state == null )
      return;
    Object temp = new_state.get(BUTTON_TEXT);
    if( temp != null )
    {
      button.setText((String)temp);
    }
  }
  
 /**
  * Since the button holds no value other than a title, this method calls
  * JButton.doClick() if a linked button is pressed..
  *
  *  @param  value Boolean - true if pressed, false if generated by other
  *                means.
  */
  public void setControlValue(Object value)
  {
    // Make sure value is valid.
    if( value == null || !(value instanceof Boolean) )
      return; 
    // Do nothing if button was not pressed.
    if( !((Boolean)value).booleanValue() )
      return;
    ignore_change = true;
    button.doClick();
    ignore_change = false;
  }
  
 /**
  * Returns Boolean value, true if button was pressed.
  *
  *  @return Returns Boolean value, true if button was pressed. 
  */
  public Object getControlValue()
  {
    return new Boolean(button_pressed);
  }
  
 /**
  * This method will make an exact copy of the control.
  *
  *  @return A new, identical instance of the control.
  */
  public ViewControl copy()
  {
    ButtonControl bc = new ButtonControl(button.getText());
    bc.setObjectState( getObjectState(PROJECT) );
    return bc;
  }
  
 /**
  * Gets the button
  *
  * @return Returns an object of type JButton.
  */
  public JButton getButton()
  {
    return button;
  }  


 /*
   * CheckboxListener moniters the JCheckBox private data member for the
   * ControlCheckbox class
   */
   private class ButtonListener implements ActionListener
   { 
      public void actionPerformed( ActionEvent ae )
      {
         send_message(BUTTON_PRESSED);
         //System.out.println("the button was pressed");
         // This if statement will prevent VALUE_CHANGED to be sent out when
         // the setControlValue() method is called.
         if( !ignore_change )
	 {
	   button_pressed = true;
           send_message(VALUE_CHANGED);
	   button_pressed = false;
         }
      }
   }

  /**
   *  For testing purposes only. If "cm" is passed as an argument, the
   *  ControlManager will link controls.
   */
   public static void main(String[] args)
   { 
    // If cm is passed in, test with control manager.
    if( args.length > 0 && args[0].equalsIgnoreCase("cm") )
    {
      ViewControl[] controls = new ViewControl[3];
      controls[0] = new ButtonControl("Button1");
      controls[0].setSharedKey("Button");
      controls[1] = new ButtonControl("Button2");
      controls[1].setSharedKey("Button");
      controls[2] = new ButtonControl("Button3");
      controls[2].setSharedKey("Button");
      
      controls[2].addActionListener( new ActionListener()
          {
	    public void actionPerformed( ActionEvent ae )
	    {
	      if( ae.getActionCommand().equals(BUTTON_PRESSED) )
	        System.out.println("Button 3 pressed");
	    }
	  } );
      
      JFrame frame = ControlManager.makeManagerTestWindow( controls );
      WindowShower.show(frame);
      return;
    }
      String name = "button";


      ButtonControl button = new ButtonControl(name);
      

      JFrame frame = new JFrame();
      frame.getContentPane().setLayout( new GridLayout(2,1) );
      frame.setTitle("LabelCombobox Test");
      frame.setBounds(0,0,135,120);
      frame.getContentPane().add(button);
      frame.getContentPane().add(button.copy());

      WindowShower.show(frame);
 
   }
}
