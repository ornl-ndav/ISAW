/* 
 * File: NormalizeBySolidAngle.java
 *  
 * Copyright (C) 2006     Dennis Mikkelson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *
 * Contact :  Dennis Mikkelson<mikkelsond@uwstout.edu>
 *            MSCS Department
 *            HH237H
 *            Menomonie, WI. 54751
 *            (715)-232-2291
 *
 * This work was supported by the National Science Foundation under grant
 * number DMR-0426797, and by the Intense Pulsed Neutron Source Division
 * of Argonne National Laboratory, Argonne, IL 60439-4845, USA.
 *
 *
 * Modified:
 *
 * $Log$
 * Revision 1.1  2006/07/14 21:16:50  dennis
 * Example of an operator accessing values and attributes in
 * DataSets, generated by applying the Method2OperatorWizard
 * to a static method in ExampleOperatorMethods.java
 *
 *
 */

package Operators.Example;
import DataSetTools.operator.*;
import DataSetTools.operator.Generic.*;
import gov.anl.ipns.Parameters.*;
import DataSetTools.parameter.*;

import gov.anl.ipns.Util.SpecialStrings.*;

import Command.*;

/**
 * This class has been dynamically created using the Method2OperatorWizard
 * and usually should not be edited.
 */
public class NormalizeBySolidAngle extends GenericOperator{


   /**
    * Constructor for the operator.  Calls the super class constructor.
    */
   public NormalizeBySolidAngle(){
     super("NormalizeBySolidAngle");
     }


   /**
    * Gives the user the command for the operator.
    *
    * @return  The command for the operator, a String.
    */
   public String getCommand(){
      return "NormalizeBySolidAngle";
   }


   /**
    * Sets the default parameters for the operator.
    */
   public void setDefaultParameters(){
      clearParametersVector();
      addParameter( new DataSetPG("Select DataSet",null));
      addParameter( new FloatPG("Normalization Factor",0.001f));
   }


   /**
    * Writes a string for the documentation of the operator provided by
    * the user.
    *
    * @return  The documentation for the operator.
    */
   public String getDocumentation(){
      StringBuffer S = new StringBuffer();
      S.append("@overview    "); 
      S.append("Normalize the counts in a spectrum by multiplying each count by");
      S.append(" scale_factor/solid_angle.  The error estimates are also adjusted,");
      S.append(" assuming the error in the solid_angle value is zero.");
      S.append(" At this level, the basic information for each Data block is unpacked");
      S.append(" from a DataSet into arrays and passed on to a more basic routine to");
      S.append(" do the actual calculation.");
      S.append("@algorithm    "); 
      S.append("Each spectrum value is multiplied by scale_factor/solid_angle");
      S.append("@assumptions    "); 
      S.append("The Data blocks must have properly set PixelInfoList attributes");
      S.append("@param   ");
      S.append("The DataSet to be normalized");
      S.append("@param   ");
      S.append("Scale factor to keep reasonable range on the normalized counts");
      S.append("@error ");
      S.append("Exceptions will be thrown if the DataSet does not have");
      S.append(" the required attributes.");
      return S.toString();
   }


   /**
    * Returns a string array with the category the operator is in.
    *
    * @return  An array containing the category the operator is in.
    */
   public String[] getCategoryList(){
            return new String[]{
                     "Macros",
                     "Examples"
                     };
   }


   /**
    * Returns the result of the operator, otherwise and ErrorString.
    *
    * @return  The result of the operator, or an ErrorString.
    */
   public Object getResult(){
      try{

         DataSetTools.dataset.DataSet ds = (DataSetTools.dataset.DataSet)(getParameter(0).getValue());
         float scale_factor = ((FloatPG)(getParameter(1))).getfloatValue();
         DataSetTools.dataset.DataSet Xres=Operators.Example.ExampleOperatorMethods.NormalizeBySolidAngle(ds,scale_factor );

         return Xres;
       }catch( Throwable XXX){
        String[]Except = ScriptUtil.
            GetExceptionStackInfo(XXX,true,1);
        String mess="";
        if(Except == null) Except = new String[0];
        for( int i =0; i< Except.length; i++)
           mess += Except[i]+"\r\n            "; 
        return new ErrorString( XXX.toString()+":"
             +mess);
                }
   }
}
