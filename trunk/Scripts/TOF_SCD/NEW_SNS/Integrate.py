from Wizard.TOF_SCD.Util import IntegrateMultipleRuns
from jarray import zeros, array

class Integrate(GenericTOF_SCD):
    def setDefaultParameters(self):
        
      self.super__clearParametersVector()
      self.addParameter( DataDirPG("path to data files",None))
      self.addParameter( DataDirPG("output path",None))
      self.addParameter(  ArrayPG("run numbers","[]"))
      self.addParameter(  IntArrayPG("Data set nums","[]"))
      self.addParameter(  StringPG("experiment name",""))

      Choices =array( ["primitive","a centered","b centered","c centered","[f]ace centered"," body centered","[r]hombohedral centered"],String)
      self.addParameter(  ChoiceListPG("Centering Type",Choices))
      V = Vector();
      V.addElement( Boolean(0))
      V.addElement( Integer(2))
      V.addElement( Integer(0))
      self.addParameter(  BooleanEnablePG("Calibrate the data sets(yes/no)", V))
      self.addParameter(  LoadFilePG("Calibration file",None))
      self.addParameter(  IntegerPG("line or mode",-1))
      self.addParameter(  IntArrayPG("Offsets from peak time","-1:3"))
      self.addParameter(  IntegerPG("Increment slice amount",1))
      self.addParameter(  StringPG("Instrument","SNAP_"))
      self.addParameter(  StringPG("File extension",".nxs"))
      self.addParameter(  FloatPG("Minimum d-spacing",0))
      Choices = array(["MaxIToSigI","Shoe Box", "MaxIToSigI-old","TOFINT","EXPERIMENTAL"],String)
      self.addParameter(  ChoiceListPG("Peak Algorithm", Choices))     
      self.addParameter( IntArrayPG("Box Delta x (col) Range","-2:2"))
      self.addParameter(  IntArrayPG("Box Delta y (row) Range","-2:2"))
      self.addParameter(  FloatPG("Use Shoe Box integration for peaks below this I/sig(I) ratio",0))
      self.addParameter(  IntegerPG("Max running threads",1))
      self.addParameter(  BooleanPG("Pop Up Log Info",0))
      self.addParameter(  BooleanPG("Pop Up integrate file",01))
      
      self.addParameter(  BooleanPG("Append to Prev integrate file ",1))
    def getResult(self):
      path =self.getParameter(0).getValue()
      outpath =self.getParameter(1).getValue()
      run_numbers = (self.getParameter(2).getValue())
      DataSetNums = self.getParameter(3).getValue()
      expName = self.getParameter(4).getValue()
      centering = self.getParameter(5).getValue()
      useCalibFile =self.getParameter(6).getbooleanValue()
      calibfile  =self.getParameter(7).getValue()
      line2use =self.getParameter(8).getintValue()
      time_slcie_range = self.getParameter(9).getValue()
      increase = self.getParameter(10).getintValue()
      instr = self.getParameter(11).getValue()
      FileExt = self.getParameter(12).getValue()
      d_min = self.getParameter(13).getfloatValue()
      PeakAlg = self.getParameter(14).getValue()
      Xrange = self.getParameter(15).getValue()
      Yrange = self.getParameter(16).getValue()
      max_shoebox = self.getParameter(17).getfloatValue()
      MaxThreads = self.getParameter(18).getintValue()
      ShowLog = self.getParameter(19).getbooleanValue()
      ShowPeaks = self.getParameter(20).getbooleanValue()
      append = self.getParameter(21).getbooleanValue()
      return IntegrateMultipleRuns(path,outpath,run_numbers,DataSetNums,expName,centering,useCalibFile,calibfile,line2use,time_slcie_range,increase,instr,FileExt,d_min,PeakAlg,Xrange,Yrange,max_shoebox,MaxThreads,ShowLog, ShowPeaks,append)
      


    def getCategoryList( self):
       
      return ["Macros","Instrument Type","TOF_NSCD","NEW_SNS"]
    
    def getDocumentation( self):
      S = StringBuffer()
      S.append("@overview    ") 
      S.append("For each detector in multiple files,finds theoretical positions of peaks")
      S.append(" and integrates them. Uses threads or slurm processed  to integrate each  data set ")
      S.append("in parallel. Slurm properties must be set in IsawProps.dat")
      S.append("@algorithm    ") 
      S.append("Several integrate algorithms are available.")
      S.append("@assumptions    ") 
      S.append("The matrix files are already created and in outpath +\"ls\"+expName+runnum+\".mat\"")
      S.append("@param   ")
      S.append("The path where the multiple data set files are stored")
      S.append("@param   ")
      S.append("The path where all the outputs go")
      S.append("@param   ")
      S.append("The Run numbers of the data set files,Blank for all")
      S.append("@param   ")
      S.append("The data set numbers in a file to \"integrate\",Blank for all")
      S.append("@param   ")
      S.append("The name of the experiment")
      S.append("@param   ")
      S.append("The centering type:primitive,a centered,")
      S.append(" b centered,c centered, [f]ace centered,")
      S.append(" [i] body centered,[r]hombohedral centered")
      S.append("@param   ")
      S.append("Calibrate the data sets(yes/no)")
      S.append("@param   ")
      S.append("The calibration file used to calibrate the  data sets")
      S.append("@param   ")
      S.append("The line in the calibration file to use or mode")
      S.append("@param   ")
      S.append("time-slice range around peak center")
      S.append("@param   ")
      S.append("Increment slice size by")
      S.append("@param   ")
      S.append("Instrument name(Prefix after path for a file)")
      S.append("@param   ")
      S.append("Extension for filename")
      S.append("@param   ")
      S.append("minimum d-spacing to consider")
      S.append("@param   ")
      S.append("Peak Algorithm: MaxIToSigI, Shoe_Box, MaxIToSigI-old, TOFINT or EXPERIMENTAL")
      S.append("@param   ")
      S.append("Box Delta x (col) Range (-2:2)")
      S.append("@param   ")
      S.append("Box Delta y (row) Range (-2:2)")
      S.append("@param   ")
      S.append("maximum peak for Shoe box intgration")
      S.append("@param   ")
      S.append("The maximum number of threads to run")
      S.append("@param   ")
      S.append("Pop up the log file")
      S.append("@param   ")
      S.append("Pop up the Peaks file")
      S.append("@param   ")
      S.append("Append to previous integrate file")
      S.append("@error ")
      S.append("No Data Seets to integrate")
      S.append(" No span around a peak to integrate")
      S.append(" Cannot read data files or there is some error in the file")
      S.append(" Threads take too long to run.")
      return S.toString()

    def  __init__(self):
      Operator.__init__(self,"Integrate")

