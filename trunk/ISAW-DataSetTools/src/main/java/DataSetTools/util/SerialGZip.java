/*
 * File:  SerialGZip.java
 *
 * Copyright (C) 2003, Dennis Mikkelson
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *
 * Contact : Dennis Mikkelson <mikkelsond@uwstout.edu>
 *           Department of Mathematics, Statistics and Computer Science
 *           University of Wisconsin-Stout
 *           Menomonie, WI 54751, USA
 *
 * This work was supported by the National Science Foundation under grant
 * number DMR-0218882.
 *
 * For further information, see <http://www.pns.anl.gov/ISAW/>
 *
 * Modified:
 * 
 *  $Log$
 *  Revision 1.1  2003/02/21 18:33:53  dennis
 *  Initial version of convenience class for compressing a
 *  Serializable object into a byte array in GZip format.
 *
 */

package  DataSetTools.util;

import java.io.*;
import java.util.zip.*;

/**
 *   This class provides utility methods for compressing a Serializable object 
 * into a byte array and for decompressing such a byte array.
 */  

public class SerialGZip  
{

  /**
   *  Compress a Serializable object into a byte array using a GZIPOutputStream.
   *
   *  @param  obj           The object to compress.
   *  @param  initial_size  The initial number of bytes allocated for the
   *                        array of bytes.  This will be increased as needed.
   *
   *  @return An array of bytes containing the GZipped object.  If an 
   *          exception is generated by the compression process, an error 
   *          message will be written to the console and null is returned.
   */
  public byte[] compress( Serializable obj, int initial_size )
  {
    try
    {
      ByteArrayOutputStream byte_os = new ByteArrayOutputStream( initial_size );
      GZIPOutputStream      gzip_os = new GZIPOutputStream( byte_os );
      ObjectOutputStream    obj_os  = new ObjectOutputStream( gzip_os );

      obj_os.writeObject( obj );

      obj_os.flush();
      gzip_os.finish();
      byte_os.flush();

      return byte_os.toByteArray();
    }
    catch ( Exception e )
    {
      System.out.println("GZip exception: " + e );
      e.printStackTrace();
      return null;
    }
  }

  /**
   *  Decompress a Serializable object from a byte array using a 
   *  GZIPInputStream.
   *
   *  @param  buffer        Array containing a GZipped object.
   *
   *  @return The object resulting from unzipping the bytes in the array.  
   *          If an exception is generated by the gunzip process, an error 
   *          message will be written to the console and null is returned.
   */
  public Object inflate( byte buffer[] )
  {
    try
    {
      ByteArrayInputStream byte_is = new ByteArrayInputStream( buffer );
      GZIPInputStream      gzip_is = new GZIPInputStream( byte_is );
      BufferedInputStream  buf_is  = new BufferedInputStream( gzip_is );
      ObjectInputStream    obj_is  = new ObjectInputStream( buf_is  );

      return obj_is.readObject(); 
    }
    catch ( Exception e )
    {
      System.out.println("GUnZip exception: " + e );
      e.printStackTrace();
      return null;
    }
  }
  
} 
