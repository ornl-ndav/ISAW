
Isaw Operators HOW TO
Nov. 21, 2001
Dennis Mikkelson

-----------------------------------------------------------------------------
INTRODUCTION

  The Operator concept in Isaw provides a very powerful and flexible way 
to implement special capabilities that are not in the basic Isaw system.
A user-supplied operator can be used from the Isaw GUI and from scripts,
provided it has been compiled and is in a directory where it can be found
by Isaw and run.  The Isaw application does NOT have to be recompiled to
use the new operator. Also, the parameter values required by the operator 
can be obtained from the Isaw pop up dialog box, so that the person writing 
the operator doesn't have to do any of the GUI coding themselves.  

  The ability of the operator to interact with Isaw scripts, dialog boxes
etc. comes at a small price.  Specifically, an operator must include code
to describe it's parameters to Isaw, to tell the scripting system what
it's command name is, and to make a copy of itself.  However, this code
is very "stylized" and can either be adapted from the supplied operator
template, or can be automatically generated by the operator builder 
utility.

------------------------------------------------------------------------------
A SIMPLE EXAMPLE

  A sample operator illustrates the basic structure of an operator, and how 
operators interact with Isaw and the scripting system.  The full operator 
code, with proper documentation comments is in the file HelloOperator.java. 
The following lists all of the necessary code with selected comments.

=============================================================================
HelloOperator.java
=============================================================================
package ISAW.Operators;             // The "package" for this operator. To run,
                                    // this operator must be in a directory 
                                    // named "ISAW.Operators" and the parent 
                                    // directory must be on the java CLASSPATH
import DataSetTools.operator.*;
import java.util.*;

public class HelloOperator extends GenericOperator
{
  private static final String TITLE = "Hello Operator";

  public HelloOperator()                         // Default constructor, used
  {                                              // by the ISAW GUI.  The user
    super( TITLE );                              // will interactively specify
  }                                              // the parameters to use.

  public HelloOperator( String user_name )       // Constructor that specifies
  {                                              // parameter values. This is 
    this();                                      // convenient when the operator
    parameters = new Vector();                   // is used from a java program.
    addParameter( new Parameter("Name", user_name) );
  }

  public String getCommand()                     // Tells script system what
  {                                              // the command name is for
    return "SayHello";                           // this operator
  }

  public void setDefaultParameters()             // Load or reload default
  {                                              // parameters.  This also
    parameters = new Vector();                   // sets the data types.
    addParameter( new Parameter("Name", "John Doe") );
  }

  public Object getResult()                      // This is called to run the 
  {                                              // operator using its current
                                                 // parameter values. 
    String user_name = (String)(getParameter(0).getValue());
    return new String ("Hello ") + user_name;
  }

  public Object clone()                          // Utility to allow copies of
  {                                              // of the operator to be 
    Operator op = new HelloOperator();           // created.
    op.CopyParametersFrom( this );
    return op;
  }
                                                 // Main program for testing.
  public static void main( String args[] )       // This allows running the
  {                                              // operator by itself to be 
                                                 // sure that it is working.
    System.out.println("Test of HelloOperator starting...");

                                                 // since we're not running
                                                 // in Isaw here, get the user
                                                 // name from the system.
    String name = System.getProperty( "user.name" );

                                                 // make and run the operator
    Operator op  = new HelloOperator( name );
    Object   obj = op.getResult();
                                                 // display the string returned
    System.out.println("Operator returned: " + obj );

    System.out.println("Test of HelloOperator done.");
  }
}
=============================================================================

OPERATOR STRUCTURE

  The HelloOperator demonstrates the basic operator structure.  

  First, there will typically be two constructors.  The first constructor 
is the default constructor with no parameters.  This constructor will be 
used when the operator is called from ISAW and meaningful parameter values 
will be provided by the user.  Default values are set for the parameters by 
the setDefaultParameters() method that is called by the constructor for the 
Operator super class.   The default constructor will typically just call 
the super class's constructor, specifying the title for this operator.
The second constructor takes values for the operator parameters, so that 
the operator can be conveniently used by Java applications.  This constructor
is not needed to use the operator from ISAW or with the scripting system, but
makes testing the operator more convenient.  After calling the default
constructor, this constructor creates the list of parameters in the operator, 
using the values specified in the arguments to the constructor.

  In addition to the constructors, there are four required methods that all
operators must implement.  The getCommand() method tells the scripting 
system what command to use to invoke the operator from a script.  The
setDefaultParameters() method establishes a default list of paramters for
the operator.  The parameter names and data types from this list are used 
by ISAW to construct an appropriate dialog box if the operator is invoked
from ISAW.  The getResult() method is what is called to actually carry out 
the operation.  Finally, the clone() method of object is overridden to 
allow ISAW and the scripting system to make copies of the operator if needed.

  In Java, each object can have it's own main program that can be used to 
test the object.  While it is not strictly necessary to have a main 
program for an operator, it is extremely helpful to be able to at least
test the basic functionality of the operator before it is used in a larger
system.  The main program for the HelloOperator just prints a message
indicating that the operator is being tested, then creates an instance of
the HelloOperator, using the current user's name, calls getResult() and
prints the String that was returned from getResult(). 

RUNNING THE OPERATOR

  Each operator can be used in any one of three ways.  First if it has a
main program, the main program can be run to test the operator.  It can
also be used in scripts and it can be automatically incorporated into the
Isaw menu system when Isaw is started.  The steps needed to use the 
HelloOperator in each of these ways will be described in detail. 

  In order to separately test operators, each operator can have a main 
program that tests the basic functionality of the operator.  Before it can
be used from Isaw or the scripting system, the operator must be compiled and
be able to execute.  That means that the java interpreter must be able to 
find the operator's class file, so the CLASSPATH must be set properly.  
Since the HelloOperator was made part of the ISAW.Operators package, the file
HelloOperator.java must be in a directory called ISAW/Operators.  In order to
run, the parent directory of ISAW/Operators must be on the java CLASSPATH.  If
these conditions are met, you can compile the operator using:

javac HelloOperator.java

from within the Operators directory.  This creates the file 
HelloOperator.class.  To run the operator, you can just use

java ISAW.Operators.HelloOperator

from anywhere.  The prefix "ISAW.Operators" is needed since the HelloOperator 
is in the Package ISAW.Operators.  

  To test this: 
1. Create a directory in your home directory called ISAW 
2. Create the Operators subdirectory of this ISAW directory.  
3. Copy the HelloOperator.java code into the new ISAW/Operators directory 
   in your home directory.  
4. Add your home directory to the java CLASSPATH.
5. Compile and run the HelloOperator using javac and java as described above.

If it works properly, the operator should print a message saying that it is 
running, then say hello to you and finish.   

  Once the operator has been compiled and run as a stand alone java program, 
it can also be used from the ISAW GUI and from scripts, provided the script 
interpreter can find the operator.  If the HelloOperator is in the 
ISAW/Operators directory of the user's home directory, as described above,
it will be found and "automatically" included in the ISAW menu system.

  To verify that the operator can be run from ISAW, start ISAW and go to 
the Macros -> Generic submenu.  An entry "Hello Operator" should be listed 
in the menu.  Selecting the "Hello Operator" will pop up a dialog box to 
allow you to enter your name. Press the "Apply" button to run the operator
and display the result in the dialog box.

  To verify that the operator can be used from a script, select the Scripts
tabbed pane in ISAW and enter the following one line script:

Display SayHello( "<your name>" )

then run the script.  The status window should display the result of 
running the operator.

----------------------------------------------------------------------------
SEARCH PATHS FOR USER SUPPLIED OPERATORS

  The script interpreter will look for pre-compiled operators in several places.
First, it checks for compiled operators (.class files) in an ISAW/Operators 
directory in the user's home directory.  Additional directories to look for 
operators in can be specified in the properties file, IsawProps.dat, also 
located in the user's home directory.  Specifically, the IsawProps.dat file 
can specify the location of the Isaw installation ( ISAW_HOME ), and one or 
more directories that contain operators that may be shared by several users 
( GROUP_HOME, GROUP1_HOME, GROUP2_HOME, etc).  Relevant lines from 
IsawProps.dat might look like:

     GROUP_HOME=/usr/share/IsawOps/
     GROUP1_HOME=/usr/local/HRCS_OPS/
     ISAW_HOME=/usr/local/IPNSjava/

If these lines are present in the IsawProps.dat file, the scripting system 
will look for operator class files in four locations, in the order shown:

     /home/user_name/ISAW/Operators           ( user's home directory )
     /usr/share/IsawOps/Operators
     /usr/local/HRCS_OPS/Operators
     /usr/local/IPNSjava/Operators            ( Isaw "home" directory )

In all cases the new operators being added to the system will be in a 
directory called Operators.  Some care will be needed to avoid package name
conflicts.  In the above example, there will be no name conflicts if the
CLASSPATH includes directories:

     /home/user_name
     /usr/share
     /usr/local
     /usr/local/IPNSjava

and the operators in those directories are in the following packages,
respectively:

     ISAW.Operators
     IsawOps.Operators
     HRCS_OPS.Operators
     Operators

   It is probably easiest to start adding your own operators to Isaw by 
putting your home directory on the CLASSPATH, and developing operators in 
a package, ISAW, located in the directory <home dirctory>/ISAW/Operators.  
When operators are to be shared by several members of a working group, they 
can be placed in one of the group directories, or in the ISAW_HOME directory. 
If an operator is moved to such a shared directory, the package name will 
have to be changed and the operator will have to be recompiled. 

----------------------------------------------------------------------------

OPERATOR MECHANISM, DETAILS

OPERATOR CATEGORIES

  In order to provide some structure to the menu system, the user-supplied
operators can be placed in one of several categories.  The categories
currently supported are:

     GenericOperator
     GenericLoad
     GenericSave 
     GenericSpecial

corresponding the the menu categories under the "Macro" menu bar entry.
To create an operator in a particular category, just derive the operator
from that class.  For example, if we wanted to put the HelloOperator under 
the GenericSpecial category, we would change the source code to read:

     public class HelloOperator extends GenericSpecial 
 
instead of

     public class HelloOperator extends GenericOperator.

OPERATOR PARAMETERS

  An operator is run when its getResult() method is called by the ISAW 
main program, a script, or some other java application.  At that time the
operator will be executed using the current values of its parameters.
In order for the ISAW dialog box to generate appropriate data entry lines, 
and for the scripting system to check the data types of the parameters, the
operator must be able to provide the names and data types of its parameters. 
This is done using the class DataSetTools.operator.Parameter.  

  The Parameter class bundles together two pieces of information, the name 
for the parameter and a Java Object that holds the value for the parameter.  
The class of the value Object determines the data type of that parameter.
The data types currently supported by the scripting language and dialog box
include Float, Integer, Boolean, String, DataSet, int[] and StringLists.
When writing an operator, the names and default values must be provided 
for all of the parameters.  This information must be provided in the form
of a Vector of parameters constructed in the method setDefaultParameters().

  The setDefaultParameters() method is called from the constructor for the
base class Operator.  If the operator is to be called from other java 
applications, it is also convenient to make a separate constructor that 
allows values for the parameters to be specified.  In any case, when the
getResult() method is called, the current values of the parameters will 
be used.

  When an operator is called from the main IsawGUI, the dialog box will 
obtain the current list of parameters from the operator, using methods 
implemented in the base class Operator, and will populate the dialog box
with appropriate software components to allow the user to enter values 
for the parameters.  When the "Apply" button is pressed, the parameter
values entered by the user are set as the current parameter values for 
the operator and the operator's getResult() method is called to execute
the operator.  If the operator is used from a script, the script
interpreter will set the values of the parameters in the operator from 
the values specified in the script before calling the operator's getResult()
method. 

DETAILS AND EXAMPLES
 
  In order to write operators that work with DataSets, some knowledge of
the structure and attributes of DataSets is needed.  It will probably be
helpful to look over the information on DataSets in the DataSet_Build_HOWTO
or the ISAW user manual before proceeding.  

  The basic concept is quite simple and will be quickly summarized here.
A DataSet consists of a list of Data blocks.  Each Data block has a list of 
x values and a list of y values, representing a tabulated function, or a 
histogram.  For a tabluated function, there are as many x values as y values, 
but for a histogram, there is one more x value, since the x values represent 
the bin boundaries.  

  The DataSet and each Data block also contains meta-data.  For example, 
the DataSet contains a title, units and labels for the x and y values.  
The Data blocks within a DataSet must represent the same physical 
quantities, since the units and labels at the DataSet level are assumed 
to apply to all Data blocks.  However, the Data blocks do not have to be 
aligned in any particular way, and can cover different intervals with
different resolutions since each Data block has it's own list of x values.
Also, the sample points do not have to be uniformly spaced.  Most other
meta-data is stored in extensible lists of attributes.  Each Data block 
has it's own list of attributes and the DataSet has a whole has a list
of attributes.

-----------------------------------------------------------------------------

Accessing data values...
  y-values ( array )
  x-values ( XScale object )
Return error strings...
Log messages
Eg. 1, Make a DataSet from ASCII file. ("LoadASCII.java")

Subtleties: references, cloning
Eg. 2, use references to modify values in place  ( "Ysquared.java" 
                                                    replace y by y^2 )
Eg. 3, create a new DataSet from an existing one ( "CenteredDifferences" )

Operator parameters...
Accessing attributes...
Eg. 4, make new DS using detector position attributes ( "PeakVsAngle" 
                   integrated peak intensity as function of scattering angle )

The OperatorTemplate
Eg. 5.
