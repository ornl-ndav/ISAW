package NexIO.Write;
import java.util.Date;

import DataSetTools.dataset.DataSet;
import NexIO.Inst_Type;
import NexIO.NxNodeUtils;
import NexIO.Nxlog;
import NexIO.Types;

/**
 * 
 */
public class NxWriteLog
{
   /**
    * The error message obtained from the 
    * {@link #getErrorMessage() getErrorMessage()} which 
    * holds the error generated by the method 
    * {@link #processDS(NxWriteNode, DataSet, int) 
    * processDS(NxWriteNode, DataSet, int)}, if an error occured.
    */
   private String errormessage;
  
   /**
    * 
    * @param instrType
    */
   public NxWriteLog(int instrType)
   {
     errormessage = "";
   }

   /**
    * Returns an error message or "" if there is no error
    */
   public String getErrorMessage()
   {
     return errormessage;
   }

   /**
    * Extracts the information from the Data Set and writes it to the
    * NxBeam portion of a Nexus file
    *
    * @param  NxLognode    A node whose class is NXlog
    * @param  DS      The data set whose information is to be written
    * @return true if an error occurred otherwise false
    */
   public boolean processDS( NxWriteNode nxLognode, DataSet ds, int k )
   {
      System.out.println("Inside NxWriteLog.processDS(....)");
      
      errormessage = "";
      if( nxLognode == null)
        return setErrorMessage("Null NxWriteNode passed to Nxlog");
      if( ds == null)
        return setErrorMessage("Null DataSet passed to Nxlog");      
      
      //FIXME THIS METHOD NEEDS TO BE IMPLEMENTED TO WRITE ACTUAL DATA FROM 
      //      THE DATASET
      //this is merely for testing purposes to hold the length of the array 
      //of bogus data written to the file
      final int ARRAY_SIZE = 10;
      
      NxWriteNode timeNode = nxLognode.newChildNode(Nxlog.TIME_PARAM_NAME,
                                                    "SDS");
         //FIXME Fix this to use actual data from the DataSet
         //first to write the time node's value
         float[] timeArr = new float[ARRAY_SIZE];
            timeArr[0] = 0;
         for (int i=1; i<timeArr.length; i++)
           timeArr[i] = timeArr[i-1]+1;
         timeNode.setNodeValue(timeArr,
                               Types.Float,
                               Inst_Type.
                                  makeRankArray(timeArr.length,-1,-1,-1,-1));
      
         String startDateStr = ds.getStartDate();
         String startTimeStr = ds.getStartTime();
         Date startDate = null;
         if (startDateStr != null && startTimeStr != null)
         {
            startDate = NxNodeUtils.parse(startDateStr+" "+startTimeStr);
            if (startDate != null)
            {
               String startTime_ISO8601 = 
                  NxNodeUtils.getISO8601String(startDate);
               timeNode.addAttribute(Nxlog.START_ATTRIBUTE_NAME,
                                     startTime_ISO8601.getBytes(),
                                     Types.Char,
                                     Inst_Type.
                                     makeRankArray(startTime_ISO8601.length(),
                                                   -1,-1,-1,-1));
            }
         }
         
         //"second" is the official name used for NeXus files
         String timeUnit = "second";
         timeNode.addAttribute(Nxlog.UNITS_ATTRIBUTE_NAME,
                               timeUnit.getBytes(),
                               Types.Char,
                               Inst_Type.makeRankArray(timeUnit.length(),
                                                       -1,-1,-1,-1));
         
      //now to write the duration
      String endDateStr = ds.getEndDate();
      String endTimeStr = ds.getEndTime();
      if (endDateStr != null && endTimeStr != null)
      {
         Date endDate = NxNodeUtils.parse(endDateStr+" "+endTimeStr);
         if (endDate != null && startDate != null)
         {
            long durationMs = endDate.getTime()-startDate.getTime();
            float durationSec = durationMs/1000f;
            NxWriteNode durationNode = nxLognode.newChildNode(Nxlog.
                                                        DURATION_PARAM_NAME,
                                                        "SDS");
               durationNode.setNodeValue(new Float(durationSec),
                                         Types.Float,
                                         Inst_Type.
                                            makeRankArray(1,-1,-1,-1,-1));
         }
      }
      
      //now to write the values to the file
      NxWriteNode valueNode = nxLognode.newChildNode(Nxlog.VALUE_PARAM_NAME,
                                                     "SDS");
         //FIXME have actual data from the DataSet be stored in the file
         //this is just an array of values to see if the NxLog reader/writer 
         //works
         float[] valueArr = new float[ARRAY_SIZE];
            valueArr[0] = 0;
            for (int i=1; i<valueArr.length; i++)
               valueArr[i] = valueArr[i-1]+2;
         valueNode.setNodeValue(valueArr, 
                                Types.Float, 
                                Inst_Type.
                                   makeRankArray(valueArr.length,-1,-1,-1,-1));
      
      //now to write the raw values to the file
      NxWriteNode rawValueNode = 
         nxLognode.newChildNode(Nxlog.RAW_VALUE_PARAM_NAME,"SDS");
      
         //FIXME have actual data from the DataSet be stored in the file
         float[] rawValArr = new float[ARRAY_SIZE];
         for (int i=0; i<rawValArr.length; i++)
            rawValArr[i] = (float)Math.pow(i,2);
         rawValueNode.setNodeValue(rawValArr,
                                   Types.Float,
                                   Inst_Type.
                                   makeRankArray(rawValArr.length,-1,-1,-1,-1));
      
      //now to write the description to the file
      String description = ds.getAttributeLabel();
      if (description != null)
      {
         NxWriteNode descriptionNode = 
            nxLognode.newChildNode(Nxlog.DESC_PARAM_NAME,"SDS");
            descriptionNode.setNodeValue(description,
                                         Types.Char,
                                         Inst_Type.
                                           makeRankArray(
                                            description.length(),-1,-1,-1,-1));
      }
      return false;
      /*
      errormessage ="";
      byte[][] time = new byte[20][50];
      DateFormat df = DateFormat.getDateTimeInstance( DateFormat.LONG,
                                         DateFormat.LONG);

      float[]  temperature = new float[20],
        electric_field = new float[20];
      long t = (new Date()).getTime();
      for( int i=0; i<20; i++)
      {
         String S=df.format ((new Date( t+100*k+ 5*i)));
         S = S+(char)0;
         byte[] b = S.getBytes();
         System.arraycopy( b,0,time[i],0,b.length);
         temperature[i]=100+k+i;
         electric_field[i] = .01f+ .3f*k +.5f*i;
      }

      NxWriteNode timeNode = NxLognode.newChildNode( "time","SDS");
      timeNode.setNodeValue(time, Types.Char, NexIO.Inst_Type.makeRankArray(
                   20,50,-1,-1,-1));
      NxWriteNode tempNode = NxLognode.newChildNode( "temperature","SDS");
      tempNode.setNodeValue( temperature, Types.Float, NexIO.Inst_Type.makeRankArray(20,
           -1,-1,-1,-1));
      tempNode.addAttribute( "units",("Fahrenheit"+(char)0).getBytes(), Types.Char,
         NexIO.Inst_Type.makeRankArray( 7,-1,-1,-1,-1));
      NxWriteNode elecNode = NxLognode.newChildNode( "electric_field","SDS");
      elecNode.setNodeValue( electric_field, Types.Float, NexIO.Inst_Type.makeRankArray(20,
           -1,-1,-1,-1));
      return false;
      */
   }
  
   /**
    * Sets {@link #errormessage errormessage} to <code>err</code> and returns 
    * true.
    * @param err The new error message.
    * @return true
    */
   private boolean setErrorMessage( String err)
   {
      errormessage = err;
      return true;
   }
   
   public static void main(String[] args)
   {
   }
}
